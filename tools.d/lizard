#!/bin/bash

set -euo pipefail
which -s lizard || exit 1

source=$1
tmpdir=$(mktemp -d)

choose() {
  local input=$1
  local column=$2
  echo "${input}" | cut -d ':' -f"${column}"
}

# run the scan, warnings only, ignore non-zero return code
result=${tmpdir}/lizard.out
lizard -w -o "${result}" "${source}" || true

[ -s $result ] || exit 1
# iterate over results, and build up a JSON list of findings
# shellcheck disable=SC2034
awk '{print $1, $3, $5, $7}' "${result}" | while read _filename function nloc ccn ; do
  filename=$(choose "${_filename}" 1)
  startline=$(choose "${_filename}" 2)

  cat <<-EOF >> "${tmpdir}"/findings.json
  {
      "ruleId": "complexity-above-15",
      "message": {
          "text": "Function has a cyclomatic complexity value higher than 15"
      },
      "locations": [
          {
              "physicalLocation": {
                  "artifactLocation": {
                      "uri": "$filename"
                  },
                  "region": {
                      "startLine": ${startline}
                  }
              }
          }
      ]
  },
	EOF

done

# wrap the findings in some metadata
cat <<-EOF
  {
      "version": "2.1.0",
      "runs": [
          {
              "tool": {
                  "driver": {
                      "name": "lizard",
                      "informationUri": "https://github.com/terryyin/lizard",
                      "rules": []
                  }
              },
              "results": [$(sed '$ s/,$//' "${tmpdir}"/findings.json)]
          }
      ]
  }
EOF

# clean up
rm -rf "${tmpdir}"
